generator client {
  provider   = "prisma-client-js"
  engineType = "node-api"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  messages      Message[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id        String    @id @default(cuid())
  userId    String
  content   String
  type      Category?
  mood      Mood?
  summary   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  completed Boolean?  @default(false)
  Idea      Idea?
  Media     Media?
  user      User      @relation(fields: [userId], references: [id])
  Task      Task?
}

model Idea {
  messageId String  @id
  why       String?
  how       String?
  when      String?
  Message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Task {
  messageId String    @id
  deadline  DateTime? @db.Timestamp(6)
  priority  String?
  labels    String[]
  completed Boolean?  @default(false)
  Message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Media {
  messageId           String  @id
  boldness            String?
  boldnessExplanation String?
  boldnessConfidence  Int?
  Message             Message @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum Category {
  STUDY
  IDEA
  RANT
  TASK
  LOG
  MEDIA
  QUOTE
  OTHER
}

enum Mood {
  NEUTRAL
  HAPPY
  SAD
  ANGRY
  TIRED
  ANXIOUS
  EXCITED
  BORED
  REFLECTIVE
}
